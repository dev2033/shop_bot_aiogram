import os
import time
import requests

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import FSMContext
from aiogram.types import ParseMode, CallbackQuery

from c_logging import logger
from keyboards import user_keyboard, admin_keyboard, delete_confirmation
from dialogs import msg
from db import add_data, init_db, change_faq, remove_all_products_db, get_faq
from states import ProductState, QiwiState, FaqState

API_TOKEN = os.getenv("TOKEN_BOT")
ACCESS_ID = os.getenv('ADMIN_ID')


storage = MemoryStorage()
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())
# if message.from_user.id != int(ACCESS_ID):
#     await message.answer("—Ç—ã –Ω–µ –∞–¥–º–∏–Ω", parse_mode=ParseMode.MARKDOWN)
# else:


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    if message.from_user.id != int(ACCESS_ID):
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}",
                             parse_mode=ParseMode.MARKDOWN,
                             reply_markup=user_keyboard)
    else:
        start_message = "–ü—Ä–∏–≤–µ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?"
        await message.answer(start_message, parse_mode=ParseMode.MARKDOWN,
                             reply_markup=admin_keyboard)


@dp.message_handler(lambda message: message.text == msg.product_m)
async def get_products(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    if message.from_user.id != int(ACCESS_ID):
        product_message = "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤"
        await message.answer(product_message, parse_mode=ParseMode.MARKDOWN,
                             reply_markup=user_keyboard)
    else:
        start_message = "(admin) | –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤!"
        await message.answer(start_message, parse_mode=ParseMode.MARKDOWN,
                             reply_markup=admin_keyboard)


@dp.message_handler(lambda message: message.text == msg.add_product_m,
                    state=None)
async def add_product(message: types.Message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
    await ProductState.name_product.set()


@dp.message_handler(state=ProductState.name_product)
async def add_item_name(message: types.Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    global item_name
    item_name = message.text
    await state.update_data(answer1=item_name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
    await ProductState.description_product.set()


@dp.message_handler(state=ProductState.description_product)
async def add_item_description(message: types.Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    global item_description
    item_description = message.text
    await state.update_data(answer2=item_description)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞')
    await ProductState.price_product.set()


@dp.message_handler(state=ProductState.price_product)
async def add_item_price(message: types.Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ü–µ–Ω—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    global item_price
    item_price = message.text
    await state.update_data(answer2=int(item_price))
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ|–∞—Ä—Ç–∏–∫—É–ª)')
    await ProductState.data_product.set()


@dp.message_handler(state=ProductState.data_product)
async def add_item_data(message: types.Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    global item_data
    item_data = message.text
    await state.update_data(answer2=item_data)
    try:
        init_db()
        add_data(item_name, item_description, item_price, item_data)
        logger.info('Product data added successfully')
        await message.answer(f'–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!\n'
                             f'\n–ù–∞–∑–≤–∞–Ω–∏–µ - {item_name};'
                             f'\n–û–ø–∏—Å–∞–Ω–∏–µ - {item_description};'
                             f'\n–¶–µ–Ω–∞ - {item_price};'
                             f'\n–î–∞–Ω–Ω—ã–µ - {item_data}.')
    except Exception as e:
        logger.info('Product data added successfully' + str(e))
        await message.answer('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞')
    await state.finish()


@dp.message_handler(lambda message: message.text == msg.change_faq_m,
                    state=None)
async def add_faq(message: types.Message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ (FAQ)"""
    init_db()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ (FAQ)')
    await FaqState.upd_faq.set()


@dp.message_handler(state=FaqState.upd_faq)
async def update_faq(message: types.Message, state: FSMContext):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ (FAQ)"""
    about = message.text
    await state.update_data(answer2=about)
    try:
        change_faq(about)
        logger.info('FAQ has been successfully added')
        await message.answer('–û–ø–∏—Å–∞–Ω–∏–µ (FAQ) –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω!')
    except Exception as e:
        logger.info('An error occurred while adding the FAQ' + str(e))
        await message.answer('–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è FAQ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –û–®–ò–ë–ö–ê!')
    await state.finish()


@dp.message_handler(lambda message: message.text == msg.remove_all_product_m)
async def remove_all_products(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤"""
    await message.answer(
        'üò± –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä–∞???',
        reply_markup=delete_confirmation
    )


@dp.message_handler(lambda message: message.text == msg.check_faq_m)
async def displays_faq(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç FAQ"""
    await message.answer(f'‚≠êÔ∏è {get_faq()}')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(text="yes_delete_all_items")
async def remove_all_products_yes(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
    try:
        init_db()
        remove_all_products_db()
        await call.message.answer('üéâ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã!')
        logger.info('All items have been removed')
    except Exception as e:
        logger.error('Error while deleting an item' + str(e))


@dp.callback_query_handler(text="no_delete_all_items")
async def remove_all_products_yes(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –Ω–∞ –æ—Ç–∫–∞–∑ –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    await call.message.delete()
    await call.message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤! \n\n'
                              '–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É')


@dp.callback_query_handler(text="back_btn")
async def back_button(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ù–ê–ó–ê–î"""
    await call.message.delete()
    await call.message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤! \n\n'
                              '–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
